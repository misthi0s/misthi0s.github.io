<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Execution - Tag - misthi0s.dev</title>
        <link>http://localhost:1313/tags/execution/</link>
        <description>Execution - Tag - misthi0s.dev</description>
        <generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 01 Dec 2024 12:42:00 &#43;0000</lastBuildDate><atom:link href="http://localhost:1313/tags/execution/" rel="self" type="application/rss+xml" /><item>
    <title>Alternate Execution Methods - Encoding Payloads and Executing In-Memory via PowerShell</title>
    <link>http://localhost:1313/posts/2024-12-01-alternate-execution-methods-encoding-in-memory-powershell/</link>
    <pubDate>Sun, 01 Dec 2024 12:42:00 &#43;0000</pubDate>
    <author>misthi0s</author>
    <guid>http://localhost:1313/posts/2024-12-01-alternate-execution-methods-encoding-in-memory-powershell/</guid>
    <description><![CDATA[<p>In this post, we&rsquo;ll go over a fun little project I&rsquo;ve been working on; encoding an executable and using a PowerShell script to decode it and execute it in-memory. This is a common technique employed by malware to try to evade security tools on the infected system. By not writing a malicious executable to disk, there&rsquo;s less of a chance that any sort of endpoint security tool will detect and quarantine it before it can be executed. While this example will be rather simplistic in nature, it will hopefully outline how easy such a technique can be performed and provide some insight into one of many ways that threat actors will try to get their payload executed on their target.</p>]]></description>
</item>
</channel>
</rss>
