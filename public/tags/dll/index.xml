<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>dll - Tag - misthi0s.dev</title>
        <link>https://misthi0s.github.io/tags/dll/</link>
        <description>dll - Tag - misthi0s.dev</description>
        <generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 26 Dec 2024 12:42:00 &#43;0000</lastBuildDate><atom:link href="https://misthi0s.github.io/tags/dll/" rel="self" type="application/rss+xml" /><item>
    <title>Golang Quick Tips &amp; Tricks - Compile Project as DLL</title>
    <link>https://misthi0s.github.io/posts/2024-12-26-golang-tips-tricks-compile-dll/</link>
    <pubDate>Thu, 26 Dec 2024 12:42:00 &#43;0000</pubDate>
    <author>misthi0s</author>
    <guid>https://misthi0s.github.io/posts/2024-12-26-golang-tips-tricks-compile-dll/</guid>
    <description><![CDATA[In this installment of &ldquo;Golang Quick Tips &amp; Tricks&rdquo;, we&rsquo;ll go over how to compile your Go project as a Dynamic Link Library, or DLL for short. DLLs are binary files that contain functions and data that can be used by other programs. For instance, if you are making a program that needs to launch a different process, you will likely need to call the function &ldquo;CreateProcess&rdquo; within the &ldquo;kernel32.dll&rdquo; library file to do this.]]></description>
</item>
<item>
    <title>Deep Analysis of a Powershell-Based Reflective DLL Injection Sample, Part 1</title>
    <link>https://misthi0s.github.io/posts/2024-05-12-powershell-reflective-dll-injection-sample-1/</link>
    <pubDate>Sun, 12 May 2024 12:42:00 &#43;0000</pubDate>
    <author>misthi0s</author>
    <guid>https://misthi0s.github.io/posts/2024-05-12-powershell-reflective-dll-injection-sample-1/</guid>
    <description><![CDATA[Reflective DLL injection is a common technique used by malware that allows an attacker to inject a DLL into a running process without first having to write that DLL to disk. Keeping the DLL binary in memory as opposed to writing to disk provides a few different advantages, particularly in the case of security tools. Files written to disk are commonly scanned by anti-malware tools on creation as well as loading, making malicious DLLs more likely to be discovered and quarantined if created on the system.]]></description>
</item>
</channel>
</rss>
